import roboticstoolbox as rtb
from spatialmath import *
from spatialmath.base import *
import numpy as np
import rospy
from dynamixel_workbench_msgs.srv import DynamixelCommand
from sensor_msgs.msg import JointState
from px100_description.PXrobot import PX

PX = PX()

print(PX)

Thome = PX.fkine([0, 0, 0, 0])
Tp1 = SE3(transl([0, -0.1, 0.015])@troty(np.pi)@trotz(-np.pi/2))
Tp2 = SE3(transl([0, 0.1, 0.015])@troty(np.pi)@trotz(np.pi/2))
Tpg = SE3(transl([0.15, 0, 0.030])@trotx(np.pi))


hsz = 0.085  # m Height safe zone
qhome = PX.ikine(Thome.A)

Ttemp = Tp1.A.copy()
Ttemp[2, 3] = hsz
q1h = PX.ikine(Ttemp)
q1 = PX.ikine(Tp1.A)

Ttemp = Tp2.A.copy()
Ttemp[2, 3] = hsz
q2h = PX.ikine(Ttemp)
q2 = PX.ikine(Tp2.A)

Ttemp = Tpg.A.copy()
Ttemp[2, 3] = hsz
qgh = PX.ikine(Ttemp)
qg = PX.ikine(Tpg.A)

nh = 10
na = 10

qs = rtb.jtraj(qhome, q1h, na)
qs2 = rtb.jtraj(q1h, q1, nh)
qs3 = rtb.jtraj(q1, q1h, nh)
qs4 = rtb.jtraj(q1h, qgh, na)
qs5 = rtb.jtraj(qgh, qg, nh)
qs6 = rtb.jtraj(qg, qgh, nh)
qs7 = rtb.jtraj(qgh, q2h, na)
qs8 = rtb.jtraj(q2h, q2, nh)
qs9 = rtb.jtraj(q2, q2h, nh)
qs10 = rtb.jtraj(q2h, qgh, na)
qs11 = rtb.jtraj(qgh, qg, nh)
qs12 = rtb.jtraj(qg, qgh, nh)
qs13 = rtb.jtraj(qgh, qhome, na)


Qs = np.vstack((qs.q, qs2.q, qs3.q, qs4.q, qs5.q, qs6.q, qs7.q,
                qs8.q, qs9.q, qs10.q, qs11.q, qs12.q, qs13.q))


for n, q in enumerate(Qs):
    for i, angle in enumerate(q):
        PX.jointCommand(i+1, 'Goal_Position', PX.rad2bin(angle))

    PX.plot(q)

    if n == na+nh-1:
        PX.jointCommand(5, 'Goal_Position', 2350)
    if n == 3*na+5*nh-1:
        PX.jointCommand(5, 'Goal_Position', 2100)
    if n == 2*na+3*nh-1 or n == 4*na+7*nh-1:
        PX.jointCommand(5, 'Goal_Position', 2600)
